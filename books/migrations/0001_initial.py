# Generated by Django 5.2.6 on 2025-10-09 12:23

import books.mixins.sync
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Initial Scan', 'Initial Scan'), ('EPUB', 'EPUB'), ('MOBI', 'MOBI'), ('PDF', 'PDF'), ('OPF File', 'OPF File'), ('Open Library', 'Open Library'), ('Google Books', 'Google Books'), ('Comic Vine', 'Comic Vine'), ('Open Library Covers', 'Open Library Covers'), ('Google Books Covers', 'Google Books Covers'), ('Manual Entry', 'Manual Entry'), ('ISBN Content Scan', 'ISBN Content Scan')], max_length=50, unique=True)),
                ('trust_level', models.FloatField(default=0.5, help_text='Trust level for this source (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('priority', models.IntegerField(default=1, help_text='Source priority for ordering')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this source is active')),
            ],
            options={
                'ordering': ['-trust_level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ScanFolder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Untitled', max_length=100)),
                ('path', models.CharField(max_length=500)),
                ('path_hash', models.CharField(default='', editable=False, max_length=64, unique=True)),
                ('content_type', models.CharField(choices=[('ebooks', 'Ebooks'), ('comics', 'Comics'), ('audiobooks', 'Audiobooks')], default='ebooks', help_text='Type of content in this scan folder', max_length=20)),
                ('language', models.CharField(choices=[('en', 'English'), ('fr', 'French'), ('de', 'German'), ('nl', 'Dutch'), ('es', 'Spanish'), ('it', 'Italian'), ('pt', 'Portuguese'), ('ja', 'Japanese'), ('ko', 'Korean'), ('zh', 'Chinese'), ('ru', 'Russian'), ('pl', 'Polish'), ('he', 'Hebrew'), ('hu', 'Hungarian'), ('tr', 'Turkish'), ('ca', 'Catalan'), ('id', 'Indonesian')], default='en', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('last_scanned', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Scan Folder',
                'verbose_name_plural': 'Scan Folders',
            },
        ),
        migrations.CreateModel(
            name='ScanStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Running', 'Running'), ('Completed', 'Completed'), ('Failed', 'Failed')], default='Pending', max_length=20)),
                ('progress', models.IntegerField(default=0)),
                ('message', models.TextField(blank=True, null=True)),
                ('started', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('last_processed_file', models.TextField(blank=True, null=True)),
                ('total_files', models.IntegerField(default=0)),
                ('processed_files', models.IntegerField(default=0)),
                ('scan_folders', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100)),
                ('name_normalized', models.CharField(db_index=True, max_length=200, unique=True)),
                ('is_reviewed', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['name'],
                'constraints': [models.UniqueConstraint(fields=('first_name', 'last_name'), name='unique_author_name_combo')],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('is_reviewed', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['name'],
                'constraints': [models.CheckConstraint(condition=models.Q(('name', ''), _negated=True), name='genre_name_not_empty')],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('is_reviewed', models.BooleanField(default=False)),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(('name', ''), _negated=True), name='publisher_name_not_empty')],
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(choices=[('ebook', 'Ebook'), ('audiobook', 'Audiobook'), ('comic', 'Comic Issue')], default='ebook', max_length=20)),
                ('first_scanned', models.DateTimeField(auto_now_add=True)),
                ('last_scanned', models.DateTimeField(auto_now=True)),
                ('is_placeholder', models.BooleanField(default=False)),
                ('is_duplicate', models.BooleanField(default=False)),
                ('is_corrupted', models.BooleanField(default=False)),
                ('is_available', models.BooleanField(default=True)),
                ('last_scan_status', models.CharField(blank=True, max_length=20, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('scan_folder', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='books.scanfolder')),
            ],
            options={
                'ordering': ['-last_scanned', 'id'],
            },
        ),
        migrations.CreateModel(
            name='ScanHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_id', models.CharField(max_length=100, unique=True)),
                ('scan_type', models.CharField(choices=[('scan', 'Initial Scan'), ('rescan', 'Rescan'), ('resume', 'Resume Scan')], default='scan', max_length=20)),
                ('folder_path', models.TextField()),
                ('folder_name', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('completed', 'Completed Successfully'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('partial', 'Partially Completed')], max_length=20)),
                ('started_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField()),
                ('duration_seconds', models.IntegerField()),
                ('total_files_found', models.IntegerField(default=0)),
                ('files_processed', models.IntegerField(default=0)),
                ('files_skipped', models.IntegerField(default=0)),
                ('files_failed', models.IntegerField(default=0)),
                ('books_added', models.IntegerField(default=0)),
                ('books_updated', models.IntegerField(default=0)),
                ('books_removed', models.IntegerField(default=0)),
                ('warnings_count', models.IntegerField(default=0)),
                ('errors_count', models.IntegerField(default=0)),
                ('external_apis_used', models.BooleanField(default=False)),
                ('api_requests_made', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('summary', models.TextField(blank=True, null=True)),
                ('metadata_json', models.JSONField(default=dict)),
                ('scan_folder', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='books.scanfolder')),
            ],
            options={
                'verbose_name': 'Scan History Entry',
                'verbose_name_plural': 'Scan History Entries',
                'ordering': ['-completed_at', '-started_at'],
            },
        ),
        migrations.CreateModel(
            name='ScanLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('level', models.CharField(choices=[('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error')], max_length=10)),
                ('message', models.TextField()),
                ('file_path', models.CharField(blank=True, max_length=1000)),
                ('books_found', models.IntegerField(default=0)),
                ('books_processed', models.IntegerField(default=0)),
                ('errors_count', models.IntegerField(default=0)),
                ('scan_folder', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='books.scanfolder')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ScanQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('scan_type', models.CharField(choices=[('folder', 'Folder Scan'), ('book_ids', 'Specific Book IDs'), ('series', 'Series Scan'), ('author', 'Author Scan'), ('full', 'Full Library Scan'), ('incremental', 'Incremental Scan')], default='folder', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('scheduled', 'Scheduled'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('priority', models.IntegerField(choices=[(1, 'Low'), (2, 'Normal'), (3, 'High'), (4, 'Urgent')], default=2)),
                ('folder_paths', models.JSONField(blank=True, default=list)),
                ('book_ids', models.JSONField(blank=True, default=list)),
                ('series_names', models.JSONField(blank=True, default=list)),
                ('author_names', models.JSONField(blank=True, default=list)),
                ('rescan_existing', models.BooleanField(default=False)),
                ('update_metadata', models.BooleanField(default=True)),
                ('fetch_covers', models.BooleanField(default=True)),
                ('deep_scan', models.BooleanField(default=False)),
                ('scheduled_for', models.DateTimeField(blank=True, null=True)),
                ('estimated_files', models.IntegerField(default=0)),
                ('estimated_duration', models.IntegerField(default=0)),
                ('actual_scan_job_id', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('max_retries', models.IntegerField(default=3)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Scan Queue Item',
                'verbose_name_plural': 'Scan Queue',
                'ordering': ['-priority', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Series',
                'ordering': ['name'],
                'constraints': [models.CheckConstraint(condition=models.Q(('name', ''), _negated=True), name='series_name_not_empty')],
            },
        ),
        migrations.CreateModel(
            name='BookSeries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('series_number', models.CharField(blank=True, max_length=20, null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='series_relationships', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
                ('series', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='book_relationships', to='books.series')),
            ],
            options={
                'verbose_name_plural': 'Book Series',
                'ordering': ['-confidence'],
            },
            bases=(books.mixins.sync.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SetupWizard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('welcome_completed', models.BooleanField(default=False)),
                ('folders_completed', models.BooleanField(default=False)),
                ('content_types_completed', models.BooleanField(default=False)),
                ('scrapers_completed', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('is_skipped', models.BooleanField(default=False)),
                ('current_step', models.CharField(choices=[('welcome', 'Welcome'), ('folders', 'Folder Selection'), ('content_types', 'Content Type Assignment'), ('scrapers', 'Scraper Configuration'), ('complete', 'Setup Complete')], default='welcome', max_length=20)),
                ('selected_folders', models.JSONField(blank=True, default=list)),
                ('folder_content_types', models.JSONField(blank=True, default=dict)),
                ('scraper_config', models.JSONField(blank=True, default=dict)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('last_step_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='setup_wizard', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Setup Wizard',
                'verbose_name_plural': 'Setup Wizards',
                'db_table': 'books_setupwizard',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(choices=[('flatly', 'Flatly'), ('cosmo', 'Cosmo'), ('bootstrap', 'Bootstrap Default'), ('cerulean', 'Cerulean'), ('cyborg', 'Cyborg'), ('darkly', 'Darkly'), ('journal', 'Journal'), ('litera', 'Litera'), ('lumen', 'Lumen'), ('lux', 'Lux'), ('materia', 'Materia'), ('minty', 'Minty'), ('morph', 'Morph'), ('pulse', 'Pulse'), ('quartz', 'Quartz'), ('sandstone', 'Sandstone'), ('simplex', 'Simplex'), ('sketchy', 'Sketchy'), ('slate', 'Slate'), ('solar', 'Solar'), ('spacelab', 'Spacelab'), ('superhero', 'Superhero'), ('united', 'United'), ('vapor', 'Vapor'), ('yeti', 'Yeti'), ('zephyr', 'Zephyr')], default='flatly', max_length=20)),
                ('items_per_page', models.IntegerField(default=50)),
                ('show_covers_in_list', models.BooleanField(default=True)),
                ('default_view_mode', models.CharField(choices=[('table', 'Table'), ('grid', 'Grid')], default='table', max_length=10)),
                ('share_reading_progress', models.BooleanField(default=False)),
                ('default_folder_pattern', models.CharField(blank=True, default='${category}/${author.sortname}/${bookseries.title}', max_length=500)),
                ('default_filename_pattern', models.CharField(blank=True, default='${author.sortname} - ${bookseries.title} #${bookseries.number} - ${title}.${ext}', max_length=500)),
                ('saved_patterns', models.JSONField(blank=True, default=list)),
                ('include_companion_files', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'books_userprofile',
            },
        ),
        migrations.CreateModel(
            name='AIFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_filename', models.CharField(max_length=500)),
                ('ai_predictions', models.TextField()),
                ('prediction_confidence', models.FloatField(blank=True, null=True)),
                ('user_corrections', models.TextField()),
                ('feedback_rating', models.IntegerField(choices=[(1, 'Poor - Completely wrong'), (2, 'Fair - Some correct elements'), (3, 'Good - Mostly correct'), (4, 'Very Good - Almost perfect'), (5, 'Excellent - Perfect prediction')])),
                ('comments', models.TextField(blank=True)),
                ('needs_retraining', models.BooleanField(default=True)),
                ('processed_for_training', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_feedback', to='books.book')),
            ],
            options={
                'db_table': 'books_aifeedback',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['-created_at'], name='books_aifee_created_110b85_idx'), models.Index(fields=['needs_retraining'], name='books_aifee_needs_r_d82ae9_idx')],
                'unique_together': {('book', 'user')},
            },
        ),
        migrations.CreateModel(
            name='BookFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.CharField(max_length=1000)),
                ('file_path_hash', models.CharField(db_index=True, default='', editable=False, max_length=64)),
                ('file_format', models.CharField(max_length=20)),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
                ('chapter_number', models.IntegerField(blank=True, null=True)),
                ('chapter_title', models.CharField(blank=True, max_length=500)),
                ('track_number', models.IntegerField(blank=True, null=True)),
                ('bitrate', models.CharField(blank=True, max_length=20)),
                ('sample_rate', models.CharField(blank=True, max_length=20)),
                ('page_count', models.IntegerField(blank=True, null=True)),
                ('is_read', models.BooleanField(default=False)),
                ('read_date', models.DateTimeField(blank=True, null=True)),
                ('current_position', models.IntegerField(default=0)),
                ('cover_path', models.CharField(blank=True, max_length=1000)),
                ('opf_path', models.CharField(blank=True, max_length=1000)),
                ('first_scanned', models.DateTimeField(auto_now_add=True)),
                ('last_scanned', models.DateTimeField(auto_now=True)),
                ('chapter_sort', models.FloatField(default=999.0)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='books.book')),
            ],
            options={
                'ordering': ['book', 'chapter_sort', 'track_number'],
                'indexes': [models.Index(fields=['book', 'file_format'], name='books_bookf_book_id_a5c416_idx'), models.Index(fields=['book', 'chapter_number'], name='books_bookf_book_id_6efea8_idx'), models.Index(fields=['file_path_hash'], name='books_bookf_file_pa_8f8d2a_idx')],
                'constraints': [models.UniqueConstraint(fields=('book', 'file_path_hash'), name='unique_book_file_path')],
            },
        ),
        migrations.CreateModel(
            name='BookTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=500)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='titles', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
            ],
            options={
                'ordering': ['-confidence'],
                'indexes': [models.Index(fields=['book', 'is_active', '-confidence'], name='books_bookt_book_id_6dfb89_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('title', ''), _negated=True), name='title_not_empty')],
                'unique_together': {('book', 'title', 'source')},
            },
            bases=(books.mixins.sync.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BookMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('field_name', models.CharField(max_length=100)),
                ('field_value', models.TextField()),
                ('field_value_hash', models.CharField(editable=False, max_length=64)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
            ],
            options={
                'ordering': ['-confidence'],
                'indexes': [models.Index(fields=['book', 'field_name', 'is_active'], name='books_bookm_book_id_8cc4ca_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('field_name', ''), _negated=True), name='metadata_field_name_not_empty'), models.CheckConstraint(condition=models.Q(('field_value', ''), _negated=True), name='metadata_field_value_not_empty')],
                'unique_together': {('book', 'field_name', 'field_value_hash', 'source')},
            },
            bases=(books.mixins.sync.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BookCover',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cover_path', models.CharField(max_length=1000)),
                ('cover_path_hash', models.CharField(editable=False, max_length=64)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('format', models.CharField(blank=True, max_length=10)),
                ('is_high_resolution', models.BooleanField(default=False)),
                ('aspect_ratio', models.FloatField(blank=True, null=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='covers', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
            ],
            options={
                'ordering': ['-confidence', '-is_high_resolution', '-width'],
                'indexes': [models.Index(fields=['book', 'is_active', '-confidence'], name='books_bookc_book_id_dc76ad_idx')],
                'unique_together': {('book', 'cover_path_hash', 'source')},
            },
            bases=(books.mixins.sync.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('role', models.CharField(choices=[('author', 'Author'), ('writer', 'Writer'), ('artist', 'Artist'), ('narrator', 'Narrator'), ('editor', 'Editor'), ('illustrator', 'Illustrator'), ('translator', 'Translator')], default='author', max_length=20)),
                ('is_main_author', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_relationships', to='books.author')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='author_relationships', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
            ],
            options={
                'ordering': ['-confidence', '-is_main_author'],
                'indexes': [models.Index(fields=['book', 'is_active', '-confidence'], name='books_booka_book_id_ddc9e6_idx'), models.Index(fields=['author', 'is_active'], name='books_booka_author__d6d8e1_idx')],
                'unique_together': {('book', 'author', 'role', 'source')},
            },
            bases=(books.mixins.sync.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FileOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation_type', models.CharField(choices=[('rename', 'File Rename'), ('move', 'File Move'), ('create_folder', 'Folder Creation')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('reverted', 'Reverted')], default='pending', max_length=20)),
                ('original_file_path', models.CharField(blank=True, max_length=1000)),
                ('original_cover_path', models.CharField(blank=True, max_length=1000)),
                ('original_opf_path', models.CharField(blank=True, max_length=1000)),
                ('original_folder_path', models.CharField(blank=True, max_length=1000)),
                ('new_file_path', models.CharField(blank=True, max_length=1000)),
                ('new_cover_path', models.CharField(blank=True, max_length=1000)),
                ('new_opf_path', models.CharField(blank=True, max_length=1000)),
                ('new_folder_path', models.CharField(blank=True, max_length=1000)),
                ('additional_files', models.TextField(default='[]')),
                ('operation_date', models.DateTimeField(auto_now_add=True)),
                ('batch_id', models.UUIDField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_operations', to='books.book')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'books_fileoperation',
                'ordering': ['-operation_date'],
                'indexes': [models.Index(fields=['-operation_date'], name='books_fileo_operati_4dfeba_idx'), models.Index(fields=['book', 'status'], name='books_fileo_book_id_829e80_idx'), models.Index(fields=['batch_id'], name='books_fileo_batch_i_d75a01_idx')],
            },
        ),
        migrations.CreateModel(
            name='FinalMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_title', models.CharField(blank=True, max_length=500)),
                ('final_title_confidence', models.FloatField(default=0.0)),
                ('final_author', models.CharField(blank=True, max_length=500)),
                ('final_author_confidence', models.FloatField(default=0.0)),
                ('final_series', models.CharField(blank=True, max_length=200, null=True)),
                ('final_series_number', models.CharField(blank=True, max_length=20, null=True)),
                ('final_series_confidence', models.FloatField(default=0.0)),
                ('final_cover_path', models.CharField(blank=True, max_length=1000)),
                ('final_cover_confidence', models.FloatField(default=0.0)),
                ('final_publisher', models.CharField(blank=True, max_length=200)),
                ('final_publisher_confidence', models.FloatField(default=0.0)),
                ('language', models.CharField(blank=True, max_length=10)),
                ('isbn', models.CharField(blank=True, max_length=20)),
                ('publication_year', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('overall_confidence', models.FloatField(default=0.0)),
                ('completeness_score', models.FloatField(default=0.0)),
                ('has_cover', models.BooleanField(default=False)),
                ('has_isbn', models.BooleanField(default=False)),
                ('has_description', models.BooleanField(default=False)),
                ('metadata_complete', models.BooleanField(default=False)),
                ('is_reviewed', models.BooleanField(default=False)),
                ('is_renamed', models.BooleanField(default=False)),
                ('final_path', models.CharField(blank=True, max_length=1000)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('book', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='books.book')),
            ],
            options={
                'indexes': [models.Index(fields=['is_reviewed'], name='books_final_is_revi_c6814e_idx'), models.Index(fields=['overall_confidence'], name='books_final_overall_902875_idx'), models.Index(fields=['completeness_score'], name='books_final_complet_bcb4ae_idx'), models.Index(fields=['has_cover'], name='books_final_has_cov_2622f4_idx'), models.Index(fields=['has_isbn'], name='books_final_has_isb_0c6b5e_idx'), models.Index(fields=['metadata_complete'], name='books_final_metadat_66235d_idx')],
                'constraints': [models.CheckConstraint(condition=models.Q(('final_title_confidence__gte', 0), ('final_title_confidence__lte', 1)), name='valid_title_confidence'), models.CheckConstraint(condition=models.Q(('publication_year__isnull', True), models.Q(('publication_year__gte', 1000), ('publication_year__lte', 2100)), _connector='OR'), name='valid_publication_year')],
            },
        ),
        migrations.CreateModel(
            name='BookGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='genre_relationships', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookgenre_relationships', to='books.datasource')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_relationships', to='books.genre')),
            ],
            options={
                'indexes': [models.Index(fields=['book', 'is_active'], name='books_bookg_book_id_99cfd8_idx'), models.Index(fields=['genre', 'is_active'], name='books_bookg_genre_i_194f95_idx')],
                'unique_together': {('book', 'genre', 'source')},
            },
        ),
        migrations.CreateModel(
            name='BookPublisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publisher_relationships', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
                ('publisher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='book_relationships', to='books.publisher')),
            ],
            options={
                'ordering': ['-confidence'],
                'indexes': [models.Index(fields=['book', 'is_active', '-confidence'], name='books_bookp_book_id_c5a2f6_idx'), models.Index(fields=['publisher', 'is_active'], name='books_bookp_publish_fefb4a_idx')],
                'unique_together': {('book', 'publisher', 'source')},
            },
            bases=(books.mixins.sync.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['content_type', 'scan_folder'], name='books_book_content_94a6b4_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['is_placeholder', 'is_corrupted'], name='books_book_is_plac_717a57_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['last_scanned'], name='books_book_last_sc_901b99_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['deleted_at'], name='books_book_deleted_d5fb33_idx'),
        ),
        migrations.AddIndex(
            model_name='book',
            index=models.Index(fields=['is_available'], name='books_book_is_avai_7b1023_idx'),
        ),
        migrations.AddIndex(
            model_name='scanhistory',
            index=models.Index(fields=['job_id'], name='books_scanh_job_id_b6152e_idx'),
        ),
        migrations.AddIndex(
            model_name='scanhistory',
            index=models.Index(fields=['status'], name='books_scanh_status_ec3f7c_idx'),
        ),
        migrations.AddIndex(
            model_name='scanhistory',
            index=models.Index(fields=['-completed_at'], name='books_scanh_complet_b5373e_idx'),
        ),
        migrations.AddIndex(
            model_name='scanlog',
            index=models.Index(fields=['-timestamp', 'level'], name='books_scanl_timesta_cf3fdd_idx'),
        ),
        migrations.AddIndex(
            model_name='scanqueue',
            index=models.Index(fields=['status', 'priority'], name='books_scanq_status_1b7f17_idx'),
        ),
        migrations.AddIndex(
            model_name='scanqueue',
            index=models.Index(fields=['scan_type'], name='books_scanq_scan_ty_689642_idx'),
        ),
        migrations.AddIndex(
            model_name='scanqueue',
            index=models.Index(fields=['scheduled_for'], name='books_scanq_schedul_6184bc_idx'),
        ),
        migrations.AddIndex(
            model_name='scanqueue',
            index=models.Index(fields=['created_by'], name='books_scanq_created_cd5f91_idx'),
        ),
        migrations.AddIndex(
            model_name='scanqueue',
            index=models.Index(fields=['-created_at'], name='books_scanq_created_c41a61_idx'),
        ),
        migrations.AddIndex(
            model_name='bookseries',
            index=models.Index(fields=['book', 'is_active', '-confidence'], name='books_books_book_id_dd8a57_idx'),
        ),
        migrations.AddIndex(
            model_name='bookseries',
            index=models.Index(fields=['series', 'is_active'], name='books_books_series__37ad73_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='bookseries',
            unique_together={('book', 'series', 'source')},
        ),
    ]
