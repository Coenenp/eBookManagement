# Generated by Django 5.2.3 on 2025-07-28 09:00

import books.mixins
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.CharField(max_length=1000, unique=True)),
                ('file_format', models.CharField(choices=[('epub', 'EPUB'), ('mobi', 'MOBI'), ('pdf', 'PDF'), ('cbr', 'CBR'), ('cbz', 'CBZ'), ('placeholder', 'Placeholder')], max_length=20)),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('cover_path', models.CharField(blank=True, max_length=1000)),
                ('opf_path', models.CharField(blank=True, max_length=1000)),
                ('first_scanned', models.DateTimeField(auto_now_add=True)),
                ('last_scanned', models.DateTimeField(auto_now=True)),
                ('is_placeholder', models.BooleanField(default=False)),
                ('is_duplicate', models.BooleanField(default=False)),
                ('is_corrupted', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-last_scanned', 'file_path'],
            },
        ),
        migrations.CreateModel(
            name='DataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Filename', 'Filename'), ('EPUB', 'EPUB'), ('MOBI', 'MOBI'), ('PDF', 'PDF'), ('OPF File', 'OPF File'), ('Open Library', 'Open Library'), ('Google Books', 'Google Books'), ('Open Library Covers', 'Open Library Covers'), ('Google Books Covers', 'Google Books Covers'), ('Original Scan', 'Original Scan'), ('Manual Entry', 'Manual Entry')], max_length=50, unique=True)),
                ('trust_level', models.FloatField(default=0.5, help_text='Trust level for this source (0.0-1.0)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
            ],
            options={
                'ordering': ['-trust_level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('is_reviewed', models.BooleanField(default=False, help_text="Mark publishers you've verified or finalized")),
            ],
        ),
        migrations.CreateModel(
            name='ScanFolder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Untitled', max_length=100)),
                ('path', models.CharField(max_length=500)),
                ('language', models.CharField(choices=[('en', 'English'), ('fr', 'French'), ('de', 'German'), ('nl', 'Dutch'), ('es', 'Spanish'), ('it', 'Italian'), ('pt', 'Portuguese'), ('ja', 'Japanese'), ('ko', 'Korean'), ('zh', 'Chinese')], default='en', max_length=10)),
                ('is_active', models.BooleanField(default=True)),
                ('last_scanned', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='ScanStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Running', 'Running'), ('Completed', 'Completed'), ('Failed', 'Failed')], default='Pending', max_length=20)),
                ('progress', models.IntegerField(default=0)),
                ('message', models.TextField(blank=True, null=True)),
                ('started', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Series',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Series',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('first_name', models.CharField(blank=True, max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100)),
                ('name_normalized', models.CharField(db_index=True, max_length=200, unique=True)),
                ('is_reviewed', models.BooleanField(default=False, help_text="Mark authors you've verified or finalized")),
            ],
            options={
                'ordering': ['name'],
                'constraints': [models.UniqueConstraint(fields=('first_name', 'last_name'), name='unique_author_name_combo')],
            },
        ),
        migrations.CreateModel(
            name='FinalMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_title', models.CharField(blank=True, max_length=500)),
                ('final_title_confidence', models.FloatField(default=0.0)),
                ('final_author', models.CharField(blank=True, max_length=500)),
                ('final_author_confidence', models.FloatField(default=0.0)),
                ('final_series', models.CharField(blank=True, max_length=200)),
                ('final_series_number', models.CharField(blank=True, max_length=20)),
                ('final_series_confidence', models.FloatField(default=0.0)),
                ('final_cover_path', models.CharField(blank=True, max_length=1000)),
                ('final_cover_confidence', models.FloatField(default=0.0)),
                ('final_publisher', models.CharField(blank=True, max_length=200)),
                ('final_publisher_confidence', models.FloatField(default=0.0)),
                ('language', models.CharField(blank=True, max_length=10)),
                ('isbn', models.CharField(blank=True, max_length=20)),
                ('publication_year', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('overall_confidence', models.FloatField(default=0.0)),
                ('completeness_score', models.FloatField(default=0.0)),
                ('is_reviewed', models.BooleanField(default=False)),
                ('has_cover', models.BooleanField(default=False)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('book', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='books.book')),
            ],
        ),
        migrations.AddField(
            model_name='book',
            name='scan_folder',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='books.scanfolder'),
        ),
        migrations.CreateModel(
            name='ScanLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('level', models.CharField(choices=[('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error')], max_length=10)),
                ('message', models.TextField()),
                ('file_path', models.CharField(blank=True, max_length=1000)),
                ('scan_folder', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='books.scanfolder')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='BookTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500)),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='titles', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
            ],
            options={
                'ordering': ['-confidence'],
                'unique_together': {('book', 'title', 'source')},
            },
            bases=(books.mixins.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BookMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=100)),
                ('field_value', models.TextField()),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to ignore this metadata field for selection and display.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
            ],
            options={
                'ordering': ['-confidence'],
                'unique_together': {('book', 'field_name', 'source')},
            },
            bases=(books.mixins.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BookCover',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cover_path', models.CharField(help_text='Local file path or URL', max_length=1000)),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('format', models.CharField(blank=True, help_text='jpg, png, gif, etc.', max_length=10)),
                ('is_high_resolution', models.BooleanField(default=False)),
                ('aspect_ratio', models.FloatField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='covers', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
            ],
            options={
                'ordering': ['-confidence', '-is_high_resolution', '-width'],
                'unique_together': {('book', 'cover_path', 'source')},
            },
            bases=(books.mixins.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BookAuthor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_main_author', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.author')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookauthor', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
            ],
            options={
                'ordering': ['-confidence', '-is_main_author'],
                'unique_together': {('book', 'author', 'source')},
            },
            bases=(books.mixins.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BookGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookgenre', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
                ('genre', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.genre')),
            ],
            options={
                'unique_together': {('book', 'genre', 'source')},
            },
        ),
        migrations.CreateModel(
            name='BookPublisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookpublisher', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
                ('publisher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publisher_books', to='books.publisher')),
            ],
            options={
                'ordering': ['-confidence'],
                'unique_together': {('book', 'publisher', 'source')},
            },
            bases=(books.mixins.FinalMetadataSyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BookSeries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series_number', models.CharField(blank=True, max_length=20, null=True)),
                ('confidence', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('is_active', models.BooleanField(default=True, help_text='Uncheck to hide this metadata without deleting it.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='series_info', to='books.book')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='books.datasource')),
                ('series', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='books.series')),
            ],
            options={
                'verbose_name_plural': 'Book Series',
                'ordering': ['-confidence'],
                'unique_together': {('book', 'series', 'source')},
            },
            bases=(books.mixins.FinalMetadataSyncMixin, models.Model),
        ),
    ]
